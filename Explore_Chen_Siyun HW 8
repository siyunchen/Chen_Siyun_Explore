---
title: "Explore_Chen_Siyun"
author: "Siyun Chen"
date: "11/3/2016"
output: html_document
---

```{r}
library(ggplot2) #load and attach add-on ggplot2 packages
library(grid) #load and attach add-on grid packages

data = data.frame(diamonds)
explore <- function(data, plotswitch = "off", threshold = 0, vector = NULL) {
#A function called explore that accepts the following parameters, with defaults for the last three parameters. This function is the main function that give all subfunctions result
#Run the subfunctions first, then run this main function

#Parameter: (follwing the Homework 7)
  #data: a dataframe
  #plotswitch: whether to plot, accept three values: off, on, or grid
  #threshold: a threshold cut-off value between 0 and 1 for correlations
  #vector: the numbers of bins to use for a histogram. If the vector is not provided, then let ggplot use it’s default
#Returns: All results that the subfunctions return
  
#Subfunctions:
plot_density_count(data,plotswitch,vector) #plot the density and count histograms
  
plot_gray (data, plotswitch) #plot gray bar for every categorial and binary variable

new_result=list(Freq_table, Summarytab_num, R_squared, Pearson_core) #combine the data results of subfunctions
  
  return (new_result)
}

#1. If the plot switch parameter is “on” or “grid”, then plot a pair of blue histograms with a vertical red line at the mean (one using counts and the other density) for every numerical variable at each number of bins integer specified in the bin vector parameter. If the plot switch is set to “grid”, there should be a grid for each count-bin combination and a separate grid for each density-bin size combination.

multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
#this function multiplot is used to draw multiple graphs in one page and this function will be used in function plot_density_count
plots <- c(list(...), plotlist) #create a list 'plots' using ... and plotlist
numPlots = length(plots)
  if (is.null(layout)) { #if the layout is NULL, then use cols to determine layout
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
        ncol = cols, nrow = ceiling(numPlots/cols)) 
        #ncol=number of columns in plots, nrow=number of rows needed, calculated from # of cols
  }
  
  if (numPlots==1) {
    print(plots[[1]])
  } else {
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#plot each in the correct location
    for (i in 1:numPlots) {
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE)) #the position that contains this subplot
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}

plot_density_count <- function(data,plotswitch = 'off',vector = NULL){
#This function is used to plot a pair of blue histograms with a vertical red line at the mean (one using counts and the other density) for every numerical variable at each number of bins integer specified in the bin vector parameter.
#Parameter:
  #data: a dataframe
  #plotswitch: a character decide whether to plot
  #vector: bin numbers of historgram (use the default bin size if vector is not provided)
#Returns: a pair of blue histograms
  num=data[sapply(data,is.numeric)]
  if(plotswitch == "on"){ #when plot switch = 'on'
    if(!is.null(vector)){ #when vector is NULL
      for(j in 1:length(vector)){ 
        for(i in 1:ncol(num)){
          mean <- mean(num[,i]) #caculate the mean of each numeric column
          p1 <- ggplot(num,aes(x = num[i]),color = "blue")+ #draw the histogram of count
            geom_histogram(fill = "blue",bins=vector[j])+
            ggtitle(paste(colnames(num[i]),vector[j],sep=" bins="))+
            xlab(colnames(num[i]))+
            geom_vline(xintercept = mean,col="red") #use geom_vline to add red line
          
          p2 <- ggplot(num,aes(x=num[i],..density..))+ #draw the density histogram
            geom_histogram(fill="blue",bins=vector[j])+
            ggtitle(paste(colnames(num[i]),vector[j],sep=" bins="))+
            xlab(colnames(num[i]))+
            geom_vline(xintercept = mean,col="red") #use geom_vline to add red line
          
          grid.newpage() #use grid.newpage() to move to a new page
          pushViewport(viewport(layout = grid.layout(2, 2, heights = unit(c(1, 8), "null"))))
          title <- paste(colnames(num[i]),vector[j],sep=" bin=")
          grid.text(title, vp = viewport(layout.pos.row = 1, layout.pos.col = 1:2))
          print(p1, vp = viewport(layout.pos.row = 2, layout.pos.col = 1)) #draw p1 histogram
          print(p2, vp = viewport(layout.pos.row = 2, layout.pos.col = 2)) #draw p2 histogram
        }
      }
    }else{ #when vector is not NULL
      for(i in 1:ncol(num)){
        mean <- mean(num[,i]) #caculate the mean of each numeric column
        p1 <- ggplot(num,aes(x=num[i]),color = "blue")+ #draw the histogram of count
          geom_histogram(fill="blue")+ 
          ggtitle(paste(colnames(num[i]),"default bins",sep=" bins="))+
          xlab(colnames(num[i]))+
          geom_vline(xintercept = mean,col="red")
        p2 <- ggplot(num,aes(x=num[i],..density..))+ #draw the histogram of density
          geom_histogram(fill="blue")+
          ggtitle(paste(colnames(num[i]),"default bins",sep=" bins="))+
          xlab(colnames(num[i]))+
          geom_vline(xintercept = mean,col="red") ##use geom_vline to add red line
        grid.newpage()
        pushViewport(viewport(layout = grid.layout(2, 2, heights = unit(c(1, 8), "null"))))
        title <- paste(colnames(num[i]),"default bins",sep=" bins=")
        grid.text(title, vp = viewport(layout.pos.row = 1, layout.pos.col = 1:2))
        print(p1, vp = viewport(layout.pos.row = 2, layout.pos.col = 1)) #draw p1 histogram
        print(p2, vp = viewport(layout.pos.row = 2, layout.pos.col = 2)) #draw p2 histogram
      }
    }
 }else{
    if(plotswitch == "grid"){ #when plot switch = 'grid'
      for(j in 1:length(vector)){
        grid.newpage()
        his_count <-list()   
        his_density <- list() #create two empty list
        for(i in 1:ncol(num)){
          his_count[[i]] <- ggplot(num, aes_string(colnames(num[i])), color = "blue") + 
            geom_histogram(fill="blue", bins = vector[j])+ 
            labs(title= paste(vector[j], "bins")) #draw histograms of count and add them to list his_count
        }
        multiplot(plotlist = his_count, cols = 2) #draw the histograms with same bins in one page
        for(i in 1:ncol(num)){
          his_density[[i]] <- ggplot(num, aes_string(colnames(num[i])), color = "blue") + 
            geom_histogram(aes(y= ..density..), fill="blue", bins = vector[j])+ 
            labs(title= paste(vector[j], "bins")) 
            #draw the histogram of density and add them to list his_density
        }
        multiplot(plotlist = his_density, cols = 2) 
        #draw the histograms of density with same bins in one page
      }
    }
  }
}

#2. If the plot switch parameter is “on” or “grid”, plot a gray bar graph for every categorical and binary variable.
is.binary <- function(v) { 
#This function is used in the function plot_gray and it can tell whether the vector is a binary vector
#Parameter: a vector
#Returns: TRUE if the vector is binary, FALSE if else
x <- unique(v) #assign all unique values in v to x
length(x) - sum(is.na(x)) == 2L #check if x only contains 2 distinct values
}

plot_gray <- function(data, plotswitch='off') {
#This function is used to plot a gray bar graph for every categorical and binary variable.
#Parameter: 
  #data: a dataframe
  #plotswitch: whether or not to plot
#Return: a gray bar graph for every categorical and binary variable
dfm_cb <- data[,sapply(data,is.factor)|sapply(data,is.logical)|sapply(data,is.binary)] 
#find the categorical and binary variables of the dataframe
  if(plotswitch=="on"|plotswitch=="grid"){
    for(i in 1:ncol(dfm_cb)){
      p <- ggplot(dfm_cb,aes(x=dfm_cb[,i]),colour="gray")+
        geom_bar()+ xlab(colnames(dfm_cb[i])) #plot a gray bar for every categorial and binary variable
      print(p)
    }
  }
}

```
